"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkTokenValidity: function() { return /* binding */ checkTokenValidity; },\n/* harmony export */   clearTokenCache: function() { return /* binding */ clearTokenCache; },\n/* harmony export */   leadsAPI: function() { return /* binding */ leadsAPI; },\n/* harmony export */   scenesAPI: function() { return /* binding */ scenesAPI; },\n/* harmony export */   tasksAPI: function() { return /* binding */ tasksAPI; }\n/* harmony export */ });\n/* harmony import */ var _utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/tokenUtils */ \"(app-pages-browser)/./src/utils/tokenUtils.ts\");\n// API服务文件\n\nconst API_BASE_URL = \"http://localhost:8000/api\";\n// Token缓存机制\nlet tokenCache = {\n    token: null,\n    isValid: false,\n    lastCheck: 0,\n    cacheDuration: 5 * 60 * 1000 // 5分钟缓存\n};\n// 获取访问令牌\nconst getAuthToken = ()=>{\n    const token = localStorage.getItem(\"access_token\");\n    tokenCache.token = token;\n    return token;\n};\n// 简化的token校验方法\nconst checkTokenValidity = async ()=>{\n    const token = getAuthToken();\n    if (!token) {\n        tokenCache.isValid = false;\n        return false;\n    }\n    // 检查缓存是否有效\n    const now = Date.now();\n    if (tokenCache.token === token && tokenCache.isValid && now - tokenCache.lastCheck < tokenCache.cacheDuration) {\n        return true;\n    }\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/verify\"), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"access-token\": token\n            }\n        });\n        if (response.ok) {\n            const result = await response.json();\n            const isValid = result.status === \"success\";\n            // 更新缓存\n            tokenCache.isValid = isValid;\n            tokenCache.lastCheck = now;\n            return isValid;\n        }\n        // 更新缓存\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = now;\n        return false;\n    } catch (error) {\n        console.error(\"Token验证失败:\", error);\n        // 更新缓存\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = now;\n        return false;\n    }\n};\n// 检查token是否有效（带缓存）\nconst isTokenValid = async ()=>{\n    const token = getAuthToken();\n    if (!token) {\n        return false;\n    }\n    // 如果缓存中的token不匹配，清除缓存\n    if (tokenCache.token !== token) {\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = 0;\n    }\n    // 检查缓存是否有效\n    const now = Date.now();\n    if (tokenCache.isValid && now - tokenCache.lastCheck < tokenCache.cacheDuration) {\n        return true;\n    }\n    // 缓存无效，重新验证\n    return await checkTokenValidity();\n};\n// 清除token缓存\nconst clearTokenCache = ()=>{\n    tokenCache.isValid = false;\n    tokenCache.lastCheck = 0;\n};\n// 通用API请求函数\nconst apiRequest = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const token = getAuthToken();\n    // 如果没有token，直接跳转到登录页面\n    if (!token) {\n        console.log(\"未找到token，跳转到登录页面\");\n        (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n        throw new Error(\"未登录，请先登录\");\n    }\n    // 异步检查token有效性，不阻塞请求\n    const tokenCheckPromise = isTokenValid();\n    const defaultHeaders = {\n        \"Content-Type\": \"application/json\",\n        ...token && {\n            \"access-token\": token\n        }\n    };\n    const config = {\n        ...options,\n        headers: {\n            ...defaultHeaders,\n            ...options.headers\n        }\n    };\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), config);\n        // 如果响应状态是401（未授权），说明token无效\n        if (response.status === 401) {\n            console.log(\"收到401响应，token无效，跳转到登录页面\");\n            clearTokenCache();\n            (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n            throw new Error(\"登录已过期，请重新登录\");\n        }\n        if (!response.ok) {\n            throw new Error(\"API请求失败: \".concat(response.status));\n        }\n        // 异步检查token有效性，如果无效则清除缓存\n        tokenCheckPromise.then((isValid)=>{\n            if (!isValid) {\n                clearTokenCache();\n            }\n        }).catch(()=>{\n            // token检查失败，清除缓存\n            clearTokenCache();\n        });\n        return response.json();\n    } catch (error) {\n        // 如果是网络错误或其他错误，也检查token\n        if (error instanceof TypeError) {\n            // 网络错误，可能是token问题\n            console.log(\"网络错误，检查token有效性\");\n            const isValid = await tokenCheckPromise;\n            if (!isValid) {\n                clearTokenCache();\n                (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n                throw new Error(\"登录已过期，请重新登录\");\n            }\n        }\n        throw error;\n    }\n};\n// 线索相关API\nconst leadsAPI = {\n    // 获取线索统计信息\n    getStatistics: async (filterBy)=>{\n        return apiRequest(\"/leads/statistics?filter_by=\".concat(filterBy));\n    },\n    // 根据筛选条件获取线索统计信息\n    getFilteredStatistics: async (filters, filterBy)=>{\n        return apiRequest(\"/leads/statistics/filtered?filter_by=\".concat(filterBy), {\n            method: \"POST\",\n            body: JSON.stringify(filters)\n        });\n    },\n    // 获取叠加筛选条件的统计信息\n    getFilteredCount: async (filters, filterBy)=>{\n        const params = new URLSearchParams();\n        // 只有当filterBy有值时才添加筛选维度参数\n        if (filterBy) {\n            params.append(\"filter_by\", filterBy);\n        }\n        // 添加筛选参数\n        if (filters.leads_product) params.append(\"leads_product\", filters.leads_product);\n        if (filters.leads_type) params.append(\"leads_type\", filters.leads_type);\n        if (filters.first_follow_start) params.append(\"first_follow_start\", filters.first_follow_start);\n        if (filters.first_follow_end) params.append(\"first_follow_end\", filters.first_follow_end);\n        if (filters.latest_follow_start) params.append(\"latest_follow_start\", filters.latest_follow_start);\n        if (filters.latest_follow_end) params.append(\"latest_follow_end\", filters.latest_follow_end);\n        if (filters.next_follow_start) params.append(\"next_follow_start\", filters.next_follow_start);\n        if (filters.next_follow_end) params.append(\"next_follow_end\", filters.next_follow_end);\n        if (filters.first_arrive_start) params.append(\"first_arrive_start\", filters.first_arrive_start);\n        if (filters.first_arrive_end) params.append(\"first_arrive_end\", filters.first_arrive_end);\n        if (filters.is_arrive !== undefined) params.append(\"is_arrive\", filters.is_arrive.toString());\n        return apiRequest(\"/leads/statistics?\".concat(params.toString()));\n    }\n};\n// 任务相关API\nconst tasksAPI = {\n    // 获取外呼任务列表\n    getCallTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 获取话术生成任务列表（只返回待生成话术的任务）\n    getScriptTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 获取任务统计数据\n    getCallTasksStatistics: async ()=>{\n        return apiRequest(\"/task-stats\");\n    },\n    // 获取任务详情\n    getCallTaskDetails: async (taskId)=>{\n        return apiRequest(\"/call-tasks/list?task_id=\".concat(taskId));\n    },\n    // 获取任务跟进记录\n    getTaskFollowupRecords: async (taskId)=>{\n        return apiRequest(\"/task_followup_records/\".concat(taskId));\n    },\n    // 创建外呼任务\n    createCallTask: async (taskData)=>{\n        return apiRequest(\"/create-autoCall-tasks\", {\n            method: \"POST\",\n            body: JSON.stringify(taskData)\n        });\n    },\n    // 创建任务（保留原有接口）\n    createTask: async (taskData)=>{\n        return apiRequest(\"/tasks/create\", {\n            method: \"POST\",\n            body: JSON.stringify(taskData)\n        });\n    },\n    // 发起外呼\n    createOutboundCall: async (outboundData)=>{\n        return apiRequest(\"/create_outbound_call\", {\n            method: \"POST\",\n            body: JSON.stringify(outboundData)\n        });\n    },\n    // 查询外呼任务\n    queryOutboundCall: async (jobIds)=>{\n        return apiRequest(\"/query_outbound_call\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                job_ids: jobIds\n            })\n        });\n    },\n    // 检查任务完成状态\n    checkTaskStatus: async (taskId)=>{\n        return apiRequest(\"/check_task_status/\".concat(taskId));\n    },\n    // 获取任务状态详情\n    getTaskStatusDetails: async (taskId)=>{\n        return apiRequest(\"/task_status_details/\".concat(taskId));\n    },\n    // 查询任务执行情况（新接口）\n    queryTaskExecution: async (taskId)=>{\n        return apiRequest(\"/query-task-execution\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 获取任务统计信息（新接口）\n    getTaskStatistics: async (taskId)=>{\n        return apiRequest(\"/task-statistics\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 获取已完成的任务列表（跟进Agent专用）\n    getCompletedTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 批量检查任务状态\n    batchCheckTaskStatus: async (taskIds)=>{\n        return apiRequest(\"/batch_check_task_status\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                job_ids: taskIds\n            })\n        });\n    },\n    // 更新任务script_id\n    updateTaskScriptId: async (taskId, scriptId)=>{\n        return apiRequest(\"/update-script-id\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId,\n                script_id: scriptId\n            })\n        });\n    },\n    // 开始外呼任务\n    startCallTask: async (taskId)=>{\n        return apiRequest(\"/start-call-task\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 暂停/重启任务\n    suspendResumeTask: async (taskId, action)=>{\n        return apiRequest(\"/suspend-resume-task\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                action: action,\n                task_id: taskId\n            })\n        });\n    }\n};\n// 场景相关API\nconst scenesAPI = {\n    // 获取场景列表\n    getScenes: async ()=>{\n        return apiRequest(\"/scenes\");\n    },\n    // 获取场景详情\n    getSceneDetails: async (sceneId)=>{\n        return apiRequest(\"/scenes/\".concat(sceneId));\n    },\n    // 创建场景\n    createScene: async (sceneData)=>{\n        return apiRequest(\"/create_scene\", {\n            method: \"POST\",\n            body: JSON.stringify(sceneData)\n        });\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    leadsAPI,\n    tasksAPI\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});