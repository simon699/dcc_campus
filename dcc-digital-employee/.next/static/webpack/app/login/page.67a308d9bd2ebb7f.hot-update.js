"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkTokenValidity: function() { return /* binding */ checkTokenValidity; },\n/* harmony export */   clearTokenCache: function() { return /* binding */ clearTokenCache; },\n/* harmony export */   leadsAPI: function() { return /* binding */ leadsAPI; },\n/* harmony export */   scenesAPI: function() { return /* binding */ scenesAPI; },\n/* harmony export */   tasksAPI: function() { return /* binding */ tasksAPI; }\n/* harmony export */ });\n/* harmony import */ var _utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/tokenUtils */ \"(app-pages-browser)/./src/utils/tokenUtils.ts\");\n// API服务文件\n\nconst API_BASE_URL = \"http://your-server-ip:8000/api\";\n// 或者使用域名：const API_BASE_URL = 'https://your-domain.com/api';\n// Token缓存机制\nlet tokenCache = {\n    token: null,\n    isValid: false,\n    lastCheck: 0,\n    cacheDuration: 5 * 60 * 1000 // 5分钟缓存\n};\n// 获取访问令牌\nconst getAuthToken = ()=>{\n    const token = localStorage.getItem(\"access_token\");\n    tokenCache.token = token;\n    return token;\n};\n// 简化的token校验方法\nconst checkTokenValidity = async ()=>{\n    const token = getAuthToken();\n    if (!token) {\n        tokenCache.isValid = false;\n        return false;\n    }\n    // 检查缓存是否有效\n    const now = Date.now();\n    if (tokenCache.token === token && tokenCache.isValid && now - tokenCache.lastCheck < tokenCache.cacheDuration) {\n        return true;\n    }\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/auth/verify\"), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"access-token\": token\n            }\n        });\n        if (response.ok) {\n            const result = await response.json();\n            const isValid = result.status === \"success\";\n            // 更新缓存\n            tokenCache.isValid = isValid;\n            tokenCache.lastCheck = now;\n            return isValid;\n        }\n        // 更新缓存\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = now;\n        return false;\n    } catch (error) {\n        console.error(\"Token验证失败:\", error);\n        // 更新缓存\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = now;\n        return false;\n    }\n};\n// 检查token是否有效（带缓存）\nconst isTokenValid = async ()=>{\n    const token = getAuthToken();\n    if (!token) {\n        return false;\n    }\n    // 如果缓存中的token不匹配，清除缓存\n    if (tokenCache.token !== token) {\n        tokenCache.isValid = false;\n        tokenCache.lastCheck = 0;\n    }\n    // 检查缓存是否有效\n    const now = Date.now();\n    if (tokenCache.isValid && now - tokenCache.lastCheck < tokenCache.cacheDuration) {\n        return true;\n    }\n    // 缓存无效，重新验证\n    return await checkTokenValidity();\n};\n// 清除token缓存\nconst clearTokenCache = ()=>{\n    tokenCache.isValid = false;\n    tokenCache.lastCheck = 0;\n};\n// 通用API请求函数\nconst apiRequest = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const token = getAuthToken();\n    // 如果没有token，直接跳转到登录页面\n    if (!token) {\n        console.log(\"未找到token，跳转到登录页面\");\n        (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n        throw new Error(\"未登录，请先登录\");\n    }\n    // 异步检查token有效性，不阻塞请求\n    const tokenCheckPromise = isTokenValid();\n    const defaultHeaders = {\n        \"Content-Type\": \"application/json\",\n        ...token && {\n            \"access-token\": token\n        }\n    };\n    const config = {\n        ...options,\n        headers: {\n            ...defaultHeaders,\n            ...options.headers\n        }\n    };\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL).concat(endpoint), config);\n        // 如果响应状态是401（未授权），说明token无效\n        if (response.status === 401) {\n            console.log(\"收到401响应，token无效，跳转到登录页面\");\n            clearTokenCache();\n            (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n            throw new Error(\"登录已过期，请重新登录\");\n        }\n        if (!response.ok) {\n            throw new Error(\"API请求失败: \".concat(response.status));\n        }\n        // 异步检查token有效性，如果无效则清除缓存\n        tokenCheckPromise.then((isValid)=>{\n            if (!isValid) {\n                clearTokenCache();\n            }\n        }).catch(()=>{\n            // token检查失败，清除缓存\n            clearTokenCache();\n        });\n        return response.json();\n    } catch (error) {\n        // 如果是网络错误或其他错误，也检查token\n        if (error instanceof TypeError) {\n            // 网络错误，可能是token问题\n            console.log(\"网络错误，检查token有效性\");\n            const isValid = await tokenCheckPromise;\n            if (!isValid) {\n                clearTokenCache();\n                (0,_utils_tokenUtils__WEBPACK_IMPORTED_MODULE_0__.handleTokenExpired)();\n                throw new Error(\"登录已过期，请重新登录\");\n            }\n        }\n        throw error;\n    }\n};\n// 线索相关API\nconst leadsAPI = {\n    // 获取线索统计信息\n    getStatistics: async (filterBy)=>{\n        return apiRequest(\"/leads/statistics?filter_by=\".concat(filterBy));\n    },\n    // 根据筛选条件获取线索统计信息\n    getFilteredStatistics: async (filters, filterBy)=>{\n        return apiRequest(\"/leads/statistics/filtered?filter_by=\".concat(filterBy), {\n            method: \"POST\",\n            body: JSON.stringify(filters)\n        });\n    },\n    // 获取叠加筛选条件的统计信息\n    getFilteredCount: async (filters, filterBy)=>{\n        const params = new URLSearchParams();\n        // 只有当filterBy有值时才添加筛选维度参数\n        if (filterBy) {\n            params.append(\"filter_by\", filterBy);\n        }\n        // 添加筛选参数\n        if (filters.leads_product) params.append(\"leads_product\", filters.leads_product);\n        if (filters.leads_type) params.append(\"leads_type\", filters.leads_type);\n        if (filters.first_follow_start) params.append(\"first_follow_start\", filters.first_follow_start);\n        if (filters.first_follow_end) params.append(\"first_follow_end\", filters.first_follow_end);\n        if (filters.latest_follow_start) params.append(\"latest_follow_start\", filters.latest_follow_start);\n        if (filters.latest_follow_end) params.append(\"latest_follow_end\", filters.latest_follow_end);\n        if (filters.next_follow_start) params.append(\"next_follow_start\", filters.next_follow_start);\n        if (filters.next_follow_end) params.append(\"next_follow_end\", filters.next_follow_end);\n        if (filters.first_arrive_start) params.append(\"first_arrive_start\", filters.first_arrive_start);\n        if (filters.first_arrive_end) params.append(\"first_arrive_end\", filters.first_arrive_end);\n        if (filters.is_arrive !== undefined) params.append(\"is_arrive\", filters.is_arrive.toString());\n        return apiRequest(\"/leads/statistics?\".concat(params.toString()));\n    }\n};\n// 任务相关API\nconst tasksAPI = {\n    // 获取外呼任务列表\n    getCallTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 获取话术生成任务列表（只返回待生成话术的任务）\n    getScriptTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 获取任务统计数据\n    getCallTasksStatistics: async ()=>{\n        return apiRequest(\"/task-stats\");\n    },\n    // 获取任务详情\n    getCallTaskDetails: async (taskId)=>{\n        return apiRequest(\"/call-tasks/list?task_id=\".concat(taskId));\n    },\n    // 获取任务跟进记录\n    getTaskFollowupRecords: async (taskId)=>{\n        return apiRequest(\"/task_followup_records/\".concat(taskId));\n    },\n    // 创建外呼任务\n    createCallTask: async (taskData)=>{\n        return apiRequest(\"/create-autoCall-tasks\", {\n            method: \"POST\",\n            body: JSON.stringify(taskData)\n        });\n    },\n    // 创建任务（保留原有接口）\n    createTask: async (taskData)=>{\n        return apiRequest(\"/tasks/create\", {\n            method: \"POST\",\n            body: JSON.stringify(taskData)\n        });\n    },\n    // 发起外呼\n    createOutboundCall: async (outboundData)=>{\n        return apiRequest(\"/create_outbound_call\", {\n            method: \"POST\",\n            body: JSON.stringify(outboundData)\n        });\n    },\n    // 查询外呼任务\n    queryOutboundCall: async (jobIds)=>{\n        return apiRequest(\"/query_outbound_call\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                job_ids: jobIds\n            })\n        });\n    },\n    // 检查任务完成状态\n    checkTaskStatus: async (taskId)=>{\n        return apiRequest(\"/check_task_status/\".concat(taskId));\n    },\n    // 获取任务状态详情\n    getTaskStatusDetails: async (taskId)=>{\n        return apiRequest(\"/task_status_details/\".concat(taskId));\n    },\n    // 查询任务执行情况（新接口）\n    queryTaskExecution: async (taskId)=>{\n        return apiRequest(\"/query-task-execution\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 获取任务统计信息（新接口）\n    getTaskStatistics: async (taskId)=>{\n        return apiRequest(\"/task-statistics\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 获取已完成的任务列表（跟进Agent专用）\n    getCompletedTasksList: async ()=>{\n        return apiRequest(\"/tasks\");\n    },\n    // 批量检查任务状态\n    batchCheckTaskStatus: async (taskIds)=>{\n        return apiRequest(\"/batch_check_task_status\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                job_ids: taskIds\n            })\n        });\n    },\n    // 更新任务script_id\n    updateTaskScriptId: async (taskId, scriptId)=>{\n        return apiRequest(\"/update-script-id\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId,\n                script_id: scriptId\n            })\n        });\n    },\n    // 开始外呼任务\n    startCallTask: async (taskId)=>{\n        return apiRequest(\"/start-call-task\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                task_id: taskId\n            })\n        });\n    },\n    // 暂停/重启任务\n    suspendResumeTask: async (taskId, action)=>{\n        return apiRequest(\"/suspend-resume-task\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                action: action,\n                task_id: taskId\n            })\n        });\n    }\n};\n// 场景相关API\nconst scenesAPI = {\n    // 获取场景列表\n    getScenes: async ()=>{\n        return apiRequest(\"/scenes\");\n    },\n    // 获取场景详情\n    getSceneDetails: async (sceneId)=>{\n        return apiRequest(\"/scenes/\".concat(sceneId));\n    },\n    // 创建场景\n    createScene: async (sceneData)=>{\n        return apiRequest(\"/create_scene\", {\n            method: \"POST\",\n            body: JSON.stringify(sceneData)\n        });\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    leadsAPI,\n    tasksAPI\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1JWLFNBQVNiO1lBQ1g7UUFDRjtJQUNGO0FBQ0YsRUFBRTtBQUVGLFVBQVU7QUFDSCxNQUFNd0IsWUFBWTtJQUN2QixTQUFTO0lBQ1RDLFdBQVc7UUFDVCxPQUFPbEUsV0FBVztJQUNwQjtJQUVBLFNBQVM7SUFDVG1FLGlCQUFpQixPQUFPQztRQUN0QixPQUFPcEUsV0FBVyxXQUFtQixPQUFSb0U7SUFDL0I7SUFFQSxPQUFPO0lBQ1BDLGFBQWEsT0FBT0M7UUFxQmxCLE9BQU90RSxXQUFXLGlCQUFpQjtZQUNqQ1YsUUFBUTtZQUNSMEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDb0Q7UUFDdkI7SUFDRjtBQUNGLEVBQUU7QUFFRiwrREFBZTtJQUNiM0Q7SUFDQXlCO0FBQ0YsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zZXJ2aWNlcy9hcGkudHM/OTU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBUEnmnI3liqHmlofku7ZcbmltcG9ydCB7IGhhbmRsZVRva2VuRXhwaXJlZCB9IGZyb20gJy4uL3V0aWxzL3Rva2VuVXRpbHMnO1xuXG5jb25zdCBBUElfQkFTRV9VUkwgPSAnaHR0cDovL3lvdXItc2VydmVyLWlwOjgwMDAvYXBpJztcbi8vIOaIluiAheS9v+eUqOWfn+WQje+8mmNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwczovL3lvdXItZG9tYWluLmNvbS9hcGknO1xuXG4vLyBUb2tlbue8k+WtmOacuuWItlxubGV0IHRva2VuQ2FjaGUgPSB7XG4gIHRva2VuOiBudWxsIGFzIHN0cmluZyB8IG51bGwsXG4gIGlzVmFsaWQ6IGZhbHNlLFxuICBsYXN0Q2hlY2s6IDAsXG4gIGNhY2hlRHVyYXRpb246IDUgKiA2MCAqIDEwMDAgLy8gNeWIhumSn+e8k+WtmFxufTtcblxuLy8g6I635Y+W6K6/6Zeu5Luk54mMXG5jb25zdCBnZXRBdXRoVG9rZW4gPSAoKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjY2Vzc190b2tlbicpO1xuICB0b2tlbkNhY2hlLnRva2VuID0gdG9rZW47XG4gIHJldHVybiB0b2tlbjtcbn07XG5cbi8vIOeugOWMlueahHRva2Vu5qCh6aqM5pa55rOVXG5leHBvcnQgY29uc3QgY2hlY2tUb2tlblZhbGlkaXR5ID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICBjb25zdCB0b2tlbiA9IGdldEF1dGhUb2tlbigpO1xuICBpZiAoIXRva2VuKSB7XG4gICAgdG9rZW5DYWNoZS5pc1ZhbGlkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8g5qOA5p+l57yT5a2Y5piv5ZCm5pyJ5pWIXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGlmICh0b2tlbkNhY2hlLnRva2VuID09PSB0b2tlbiAmJiBcbiAgICAgIHRva2VuQ2FjaGUuaXNWYWxpZCAmJiBcbiAgICAgIChub3cgLSB0b2tlbkNhY2hlLmxhc3RDaGVjaykgPCB0b2tlbkNhY2hlLmNhY2hlRHVyYXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2F1dGgvdmVyaWZ5YCwge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ2FjY2Vzcy10b2tlbic6IHRva2VuLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc3QgaXNWYWxpZCA9IHJlc3VsdC5zdGF0dXMgPT09ICdzdWNjZXNzJztcbiAgICAgIFxuICAgICAgLy8g5pu05paw57yT5a2YXG4gICAgICB0b2tlbkNhY2hlLmlzVmFsaWQgPSBpc1ZhbGlkO1xuICAgICAgdG9rZW5DYWNoZS5sYXN0Q2hlY2sgPSBub3c7XG4gICAgICBcbiAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH1cbiAgICBcbiAgICAvLyDmm7TmlrDnvJPlrZhcbiAgICB0b2tlbkNhY2hlLmlzVmFsaWQgPSBmYWxzZTtcbiAgICB0b2tlbkNhY2hlLmxhc3RDaGVjayA9IG5vdztcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVG9rZW7pqozor4HlpLHotKU6JywgZXJyb3IpO1xuICAgIC8vIOabtOaWsOe8k+WtmFxuICAgIHRva2VuQ2FjaGUuaXNWYWxpZCA9IGZhbHNlO1xuICAgIHRva2VuQ2FjaGUubGFzdENoZWNrID0gbm93O1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8g5qOA5p+ldG9rZW7mmK/lkKbmnInmlYjvvIjluKbnvJPlrZjvvIlcbmNvbnN0IGlzVG9rZW5WYWxpZCA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3QgdG9rZW4gPSBnZXRBdXRoVG9rZW4oKTtcbiAgaWYgKCF0b2tlbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIOWmguaenOe8k+WtmOS4reeahHRva2Vu5LiN5Yy56YWN77yM5riF6Zmk57yT5a2YXG4gIGlmICh0b2tlbkNhY2hlLnRva2VuICE9PSB0b2tlbikge1xuICAgIHRva2VuQ2FjaGUuaXNWYWxpZCA9IGZhbHNlO1xuICAgIHRva2VuQ2FjaGUubGFzdENoZWNrID0gMDtcbiAgfVxuXG4gIC8vIOajgOafpee8k+WtmOaYr+WQpuacieaViFxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBpZiAodG9rZW5DYWNoZS5pc1ZhbGlkICYmIChub3cgLSB0b2tlbkNhY2hlLmxhc3RDaGVjaykgPCB0b2tlbkNhY2hlLmNhY2hlRHVyYXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIOe8k+WtmOaXoOaViO+8jOmHjeaWsOmqjOivgVxuICByZXR1cm4gYXdhaXQgY2hlY2tUb2tlblZhbGlkaXR5KCk7XG59O1xuXG4vLyDmuIXpmaR0b2tlbue8k+WtmFxuZXhwb3J0IGNvbnN0IGNsZWFyVG9rZW5DYWNoZSA9ICgpID0+IHtcbiAgdG9rZW5DYWNoZS5pc1ZhbGlkID0gZmFsc2U7XG4gIHRva2VuQ2FjaGUubGFzdENoZWNrID0gMDtcbn07XG5cbi8vIOmAmueUqEFQSeivt+axguWHveaVsFxuY29uc3QgYXBpUmVxdWVzdCA9IGFzeW5jIChlbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KSA9PiB7XG4gIGNvbnN0IHRva2VuID0gZ2V0QXV0aFRva2VuKCk7XG4gIFxuICAvLyDlpoLmnpzmsqHmnIl0b2tlbu+8jOebtOaOpei3s+i9rOWIsOeZu+W9lemhtemdolxuICBpZiAoIXRva2VuKSB7XG4gICAgY29uc29sZS5sb2coJ+acquaJvuWIsHRva2Vu77yM6Lez6L2s5Yiw55m75b2V6aG16Z2iJyk7XG4gICAgaGFuZGxlVG9rZW5FeHBpcmVkKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCfmnKrnmbvlvZXvvIzor7flhYjnmbvlvZUnKTtcbiAgfVxuXG4gIC8vIOW8guatpeajgOafpXRva2Vu5pyJ5pWI5oCn77yM5LiN6Zi75aGe6K+35rGCXG4gIGNvbnN0IHRva2VuQ2hlY2tQcm9taXNlID0gaXNUb2tlblZhbGlkKCk7XG4gIFxuICBjb25zdCBkZWZhdWx0SGVhZGVycyA9IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIC4uLih0b2tlbiAmJiB7ICdhY2Nlc3MtdG9rZW4nOiB0b2tlbiB9KSxcbiAgfTtcblxuICBjb25zdCBjb25maWc6IFJlcXVlc3RJbml0ID0ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaGVhZGVyczoge1xuICAgICAgLi4uZGVmYXVsdEhlYWRlcnMsXG4gICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXG4gICAgfSxcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfSR7ZW5kcG9pbnR9YCwgY29uZmlnKTtcbiAgICBcbiAgICAvLyDlpoLmnpzlk43lupTnirbmgIHmmK80MDHvvIjmnKrmjojmnYPvvInvvIzor7TmmI50b2tlbuaXoOaViFxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgY29uc29sZS5sb2coJ+aUtuWIsDQwMeWTjeW6lO+8jHRva2Vu5peg5pWI77yM6Lez6L2s5Yiw55m75b2V6aG16Z2iJyk7XG4gICAgICBjbGVhclRva2VuQ2FjaGUoKTtcbiAgICAgIGhhbmRsZVRva2VuRXhwaXJlZCgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfnmbvlvZXlt7Lov4fmnJ/vvIzor7fph43mlrDnmbvlvZUnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBUEnor7fmsYLlpLHotKU6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIC8vIOW8guatpeajgOafpXRva2Vu5pyJ5pWI5oCn77yM5aaC5p6c5peg5pWI5YiZ5riF6Zmk57yT5a2YXG4gICAgdG9rZW5DaGVja1Byb21pc2UudGhlbihpc1ZhbGlkID0+IHtcbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBjbGVhclRva2VuQ2FjaGUoKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAvLyB0b2tlbuajgOafpeWksei0pe+8jOa4hemZpOe8k+WtmFxuICAgICAgY2xlYXJUb2tlbkNhY2hlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIOWmguaenOaYr+e9kee7nOmUmeivr+aIluWFtuS7lumUmeivr++8jOS5n+ajgOafpXRva2VuXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAvLyDnvZHnu5zplJnor6/vvIzlj6/og73mmK90b2tlbumXrumimFxuICAgICAgY29uc29sZS5sb2coJ+e9kee7nOmUmeivr++8jOajgOafpXRva2Vu5pyJ5pWI5oCnJyk7XG4gICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdG9rZW5DaGVja1Byb21pc2U7XG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgY2xlYXJUb2tlbkNhY2hlKCk7XG4gICAgICAgIGhhbmRsZVRva2VuRXhwaXJlZCgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+eZu+W9leW3sui/h+acn++8jOivt+mHjeaWsOeZu+W9lScpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxuLy8g57q/57Si55u45YWzQVBJXG5leHBvcnQgY29uc3QgbGVhZHNBUEkgPSB7XG4gIC8vIOiOt+WPlue6v+e0oue7n+iuoeS/oeaBr1xuICBnZXRTdGF0aXN0aWNzOiBhc3luYyAoZmlsdGVyQnk6ICdwcm9kdWN0JyB8ICd0eXBlJyB8ICdib3RoJyB8ICdhcnJpdmUnKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoYC9sZWFkcy9zdGF0aXN0aWNzP2ZpbHRlcl9ieT0ke2ZpbHRlckJ5fWApO1xuICB9LFxuXG4gIC8vIOagueaNruetm+mAieadoeS7tuiOt+WPlue6v+e0oue7n+iuoeS/oeaBr1xuICBnZXRGaWx0ZXJlZFN0YXRpc3RpY3M6IGFzeW5jIChmaWx0ZXJzOiBhbnksIGZpbHRlckJ5OiAncHJvZHVjdCcgfCAndHlwZScgfCAnYm90aCcpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdChgL2xlYWRzL3N0YXRpc3RpY3MvZmlsdGVyZWQ/ZmlsdGVyX2J5PSR7ZmlsdGVyQnl9YCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmaWx0ZXJzKVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIOiOt+WPluWPoOWKoOetm+mAieadoeS7tueahOe7n+iuoeS/oeaBr1xuICBnZXRGaWx0ZXJlZENvdW50OiBhc3luYyAoZmlsdGVyczogYW55LCBmaWx0ZXJCeT86ICdwcm9kdWN0JyB8ICd0eXBlJyB8ICdib3RoJyB8ICdhcnJpdmUnKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIFxuICAgIC8vIOWPquacieW9k2ZpbHRlckJ55pyJ5YC85pe25omN5re75Yqg562b6YCJ57u05bqm5Y+C5pWwXG4gICAgaWYgKGZpbHRlckJ5KSB7XG4gICAgICBwYXJhbXMuYXBwZW5kKCdmaWx0ZXJfYnknLCBmaWx0ZXJCeSk7XG4gICAgfVxuICAgIFxuICAgIC8vIOa3u+WKoOetm+mAieWPguaVsFxuICAgIGlmIChmaWx0ZXJzLmxlYWRzX3Byb2R1Y3QpIHBhcmFtcy5hcHBlbmQoJ2xlYWRzX3Byb2R1Y3QnLCBmaWx0ZXJzLmxlYWRzX3Byb2R1Y3QpO1xuICAgIGlmIChmaWx0ZXJzLmxlYWRzX3R5cGUpIHBhcmFtcy5hcHBlbmQoJ2xlYWRzX3R5cGUnLCBmaWx0ZXJzLmxlYWRzX3R5cGUpO1xuICAgIGlmIChmaWx0ZXJzLmZpcnN0X2ZvbGxvd19zdGFydCkgcGFyYW1zLmFwcGVuZCgnZmlyc3RfZm9sbG93X3N0YXJ0JywgZmlsdGVycy5maXJzdF9mb2xsb3dfc3RhcnQpO1xuICAgIGlmIChmaWx0ZXJzLmZpcnN0X2ZvbGxvd19lbmQpIHBhcmFtcy5hcHBlbmQoJ2ZpcnN0X2ZvbGxvd19lbmQnLCBmaWx0ZXJzLmZpcnN0X2ZvbGxvd19lbmQpO1xuICAgIGlmIChmaWx0ZXJzLmxhdGVzdF9mb2xsb3dfc3RhcnQpIHBhcmFtcy5hcHBlbmQoJ2xhdGVzdF9mb2xsb3dfc3RhcnQnLCBmaWx0ZXJzLmxhdGVzdF9mb2xsb3dfc3RhcnQpO1xuICAgIGlmIChmaWx0ZXJzLmxhdGVzdF9mb2xsb3dfZW5kKSBwYXJhbXMuYXBwZW5kKCdsYXRlc3RfZm9sbG93X2VuZCcsIGZpbHRlcnMubGF0ZXN0X2ZvbGxvd19lbmQpO1xuICAgIGlmIChmaWx0ZXJzLm5leHRfZm9sbG93X3N0YXJ0KSBwYXJhbXMuYXBwZW5kKCduZXh0X2ZvbGxvd19zdGFydCcsIGZpbHRlcnMubmV4dF9mb2xsb3dfc3RhcnQpO1xuICAgIGlmIChmaWx0ZXJzLm5leHRfZm9sbG93X2VuZCkgcGFyYW1zLmFwcGVuZCgnbmV4dF9mb2xsb3dfZW5kJywgZmlsdGVycy5uZXh0X2ZvbGxvd19lbmQpO1xuICAgIGlmIChmaWx0ZXJzLmZpcnN0X2Fycml2ZV9zdGFydCkgcGFyYW1zLmFwcGVuZCgnZmlyc3RfYXJyaXZlX3N0YXJ0JywgZmlsdGVycy5maXJzdF9hcnJpdmVfc3RhcnQpO1xuICAgIGlmIChmaWx0ZXJzLmZpcnN0X2Fycml2ZV9lbmQpIHBhcmFtcy5hcHBlbmQoJ2ZpcnN0X2Fycml2ZV9lbmQnLCBmaWx0ZXJzLmZpcnN0X2Fycml2ZV9lbmQpO1xuICAgIGlmIChmaWx0ZXJzLmlzX2Fycml2ZSAhPT0gdW5kZWZpbmVkKSBwYXJhbXMuYXBwZW5kKCdpc19hcnJpdmUnLCBmaWx0ZXJzLmlzX2Fycml2ZS50b1N0cmluZygpKTtcbiAgICBcbiAgICByZXR1cm4gYXBpUmVxdWVzdChgL2xlYWRzL3N0YXRpc3RpY3M/JHtwYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgfVxufTtcblxuLy8g5Lu75Yqh55u45YWzQVBJXG5leHBvcnQgY29uc3QgdGFza3NBUEkgPSB7XG4gIC8vIOiOt+WPluWkluWRvOS7u+WKoeWIl+ihqFxuICBnZXRDYWxsVGFza3NMaXN0OiBhc3luYyAoKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy90YXNrcycpO1xuICB9LFxuXG4gIC8vIOiOt+WPluivneacr+eUn+aIkOS7u+WKoeWIl+ihqO+8iOWPqui/lOWbnuW+heeUn+aIkOivneacr+eahOS7u+WKoe+8iVxuICBnZXRTY3JpcHRUYXNrc0xpc3Q6IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdCgnL3Rhc2tzJyk7XG4gIH0sXG5cbiAgLy8g6I635Y+W5Lu75Yqh57uf6K6h5pWw5o2uXG4gIGdldENhbGxUYXNrc1N0YXRpc3RpY3M6IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdCgnL3Rhc2stc3RhdHMnKTtcbiAgfSxcblxuICAvLyDojrflj5bku7vliqHor6bmg4VcbiAgZ2V0Q2FsbFRhc2tEZXRhaWxzOiBhc3luYyAodGFza0lkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdChgL2NhbGwtdGFza3MvbGlzdD90YXNrX2lkPSR7dGFza0lkfWApO1xuICB9LFxuXG5cblxuICAvLyDojrflj5bku7vliqHot5/ov5vorrDlvZVcbiAgZ2V0VGFza0ZvbGxvd3VwUmVjb3JkczogYXN5bmMgKHRhc2tJZDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoYC90YXNrX2ZvbGxvd3VwX3JlY29yZHMvJHt0YXNrSWR9YCk7XG4gIH0sXG5cbiAgLy8g5Yib5bu65aSW5ZG85Lu75YqhXG4gIGNyZWF0ZUNhbGxUYXNrOiBhc3luYyAodGFza0RhdGE6IHtcbiAgICB0YXNrX25hbWU6IHN0cmluZztcbiAgICBzY3JpcHRfaWQ/OiBzdHJpbmc7XG4gICAgc2l6ZV9kZXNjOiB7XG4gICAgICBsZWFkc190eXBlOiBzdHJpbmdbXTtcbiAgICAgIGxlYWRzX3Byb2R1Y3Q6IHN0cmluZ1tdO1xuICAgICAgZmlyc3RfZm9sbG93X3N0YXJ0Pzogc3RyaW5nO1xuICAgICAgZmlyc3RfZm9sbG93X2VuZD86IHN0cmluZztcbiAgICAgIGxhdGVzdF9mb2xsb3dfc3RhcnQ/OiBzdHJpbmc7XG4gICAgICBsYXRlc3RfZm9sbG93X2VuZD86IHN0cmluZztcbiAgICAgIG5leHRfZm9sbG93X3N0YXJ0Pzogc3RyaW5nO1xuICAgICAgbmV4dF9mb2xsb3dfZW5kPzogc3RyaW5nO1xuICAgICAgaXNfYXJyaXZlPzogbnVtYmVyW107XG4gICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgfSkgPT4ge1xuICAgIHJldHVybiBhcGlSZXF1ZXN0KCcvY3JlYXRlLWF1dG9DYWxsLXRhc2tzJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0YXNrRGF0YSlcbiAgICB9KTtcbiAgfSxcblxuICAvLyDliJvlu7rku7vliqHvvIjkv53nlZnljp/mnInmjqXlj6PvvIlcbiAgY3JlYXRlVGFzazogYXN5bmMgKHRhc2tEYXRhOiBhbnkpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdCgnL3Rhc2tzL2NyZWF0ZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGFza0RhdGEpXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8g5Y+R6LW35aSW5ZG8XG4gIGNyZWF0ZU91dGJvdW5kQ2FsbDogYXN5bmMgKG91dGJvdW5kRGF0YToge1xuICAgIGpvYl9ncm91cF9uYW1lOiBzdHJpbmc7XG4gICAgam9iX2dyb3VwX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgc3RyYXRlZ3lfanNvbj86IHtcbiAgICAgIFJlcGVhdEJ5Pzogc3RyaW5nO1xuICAgICAgbWF4QXR0ZW1wdHNQZXJEYXk/OiBudW1iZXI7XG4gICAgICBtaW5BdHRlbXB0SW50ZXJ2YWw/OiBudW1iZXI7XG4gICAgfTtcbiAgICBsZWFkX2lkczogbnVtYmVyW107XG4gICAgc2NyaXB0X2lkPzogc3RyaW5nO1xuICAgIGV4dHJhcz86IEFycmF5PHtcbiAgICAgIGtleTogc3RyaW5nO1xuICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9PjtcbiAgfSkgPT4ge1xuICAgIHJldHVybiBhcGlSZXF1ZXN0KCcvY3JlYXRlX291dGJvdW5kX2NhbGwnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG91dGJvdW5kRGF0YSlcbiAgICB9KTtcbiAgfSxcblxuICAvLyDmn6Xor6LlpJblkbzku7vliqFcbiAgcXVlcnlPdXRib3VuZENhbGw6IGFzeW5jIChqb2JJZHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy9xdWVyeV9vdXRib3VuZF9jYWxsJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGpvYl9pZHM6IGpvYklkcyB9KVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIOajgOafpeS7u+WKoeWujOaIkOeKtuaAgVxuICBjaGVja1Rhc2tTdGF0dXM6IGFzeW5jICh0YXNrSWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBhcGlSZXF1ZXN0KGAvY2hlY2tfdGFza19zdGF0dXMvJHt0YXNrSWR9YCk7XG4gIH0sXG5cbiAgLy8g6I635Y+W5Lu75Yqh54q25oCB6K+m5oOFXG4gIGdldFRhc2tTdGF0dXNEZXRhaWxzOiBhc3luYyAodGFza0lkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdChgL3Rhc2tfc3RhdHVzX2RldGFpbHMvJHt0YXNrSWR9YCk7XG4gIH0sXG5cbiAgLy8g5p+l6K+i5Lu75Yqh5omn6KGM5oOF5Ya177yI5paw5o6l5Y+j77yJXG4gIHF1ZXJ5VGFza0V4ZWN1dGlvbjogYXN5bmMgKHRhc2tJZDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy9xdWVyeS10YXNrLWV4ZWN1dGlvbicsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0YXNrX2lkOiB0YXNrSWRcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8g6I635Y+W5Lu75Yqh57uf6K6h5L+h5oGv77yI5paw5o6l5Y+j77yJXG4gIGdldFRhc2tTdGF0aXN0aWNzOiBhc3luYyAodGFza0lkOiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdCgnL3Rhc2stc3RhdGlzdGljcycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB0YXNrX2lkOiB0YXNrSWRcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8g6I635Y+W5bey5a6M5oiQ55qE5Lu75Yqh5YiX6KGo77yI6Lef6L+bQWdlbnTkuJPnlKjvvIlcbiAgZ2V0Q29tcGxldGVkVGFza3NMaXN0OiBhc3luYyAoKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy90YXNrcycpO1xuICB9LFxuXG4gIC8vIOaJuemHj+ajgOafpeS7u+WKoeeKtuaAgVxuICBiYXRjaENoZWNrVGFza1N0YXR1czogYXN5bmMgKHRhc2tJZHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy9iYXRjaF9jaGVja190YXNrX3N0YXR1cycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBqb2JfaWRzOiB0YXNrSWRzIH0pXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8g5pu05paw5Lu75Yqhc2NyaXB0X2lkXG4gIHVwZGF0ZVRhc2tTY3JpcHRJZDogYXN5bmMgKHRhc2tJZDogbnVtYmVyLCBzY3JpcHRJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy91cGRhdGUtc2NyaXB0LWlkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHRhc2tfaWQ6IHRhc2tJZCxcbiAgICAgICAgc2NyaXB0X2lkOiBzY3JpcHRJZFxuICAgICAgfSlcbiAgICB9KTtcbiAgfSxcblxuICAvLyDlvIDlp4vlpJblkbzku7vliqFcbiAgc3RhcnRDYWxsVGFzazogYXN5bmMgKHRhc2tJZDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGFwaVJlcXVlc3QoJy9zdGFydC1jYWxsLXRhc2snLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdGFza19pZDogdGFza0lkXG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIOaaguWBnC/ph43lkK/ku7vliqFcbiAgc3VzcGVuZFJlc3VtZVRhc2s6IGFzeW5jICh0YXNrSWQ6IG51bWJlciwgYWN0aW9uOiAnc3VzcGVuZCcgfCAncmVzdW1lJykgPT4ge1xuICAgIHJldHVybiBhcGlSZXF1ZXN0KCcvc3VzcGVuZC1yZXN1bWUtdGFzaycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgdGFza19pZDogdGFza0lkXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyDlnLrmma/nm7jlhbNBUElcbmV4cG9ydCBjb25zdCBzY2VuZXNBUEkgPSB7XG4gIC8vIOiOt+WPluWcuuaZr+WIl+ihqFxuICBnZXRTY2VuZXM6IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdCgnL3NjZW5lcycpO1xuICB9LFxuXG4gIC8vIOiOt+WPluWcuuaZr+ivpuaDhVxuICBnZXRTY2VuZURldGFpbHM6IGFzeW5jIChzY2VuZUlkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gYXBpUmVxdWVzdChgL3NjZW5lcy8ke3NjZW5lSWR9YCk7XG4gIH0sXG5cbiAgLy8g5Yib5bu65Zy65pmvXG4gIGNyZWF0ZVNjZW5lOiBhc3luYyAoc2NlbmVEYXRhOiB7XG4gICAgc2NlbmVfbmFtZTogc3RyaW5nO1xuICAgIHNjZW5lX2RldGFpbDogc3RyaW5nO1xuICAgIHNjZW5lX3R5cGU6IG51bWJlcjtcbiAgICBib3RfbmFtZTogc3RyaW5nO1xuICAgIGJvdF9zZXg/OiBudW1iZXI7XG4gICAgYm90X2FnZT86IG51bWJlcjtcbiAgICBib3RfcG9zdD86IHN0cmluZztcbiAgICBib3Rfc3R5bGU/OiBzdHJpbmc7XG4gICAgZGlhbG9ndWVfdGFyZ2V0Pzogc3RyaW5nO1xuICAgIGRpYWxvZ3VlX2JnPzogc3RyaW5nO1xuICAgIGRpYWxvZ3VlX3NraWxsPzogc3RyaW5nO1xuICAgIGRpYWxvZ3VlX2Zsb3c/OiBzdHJpbmc7XG4gICAgZGlhbG9ndWVfY29uc3RyYWludD86IHN0cmluZztcbiAgICBkaWFsb2d1ZV9vcGVuaW5nX3Byb21wdD86IHN0cmluZztcbiAgICBzY2VuZV90YWdzPzogQXJyYXk8e1xuICAgICAgdGFnX25hbWU6IHN0cmluZztcbiAgICAgIHRhZ19kZXRhaWw6IHN0cmluZztcbiAgICAgIHRhZ3M6IHN0cmluZztcbiAgICB9PjtcbiAgfSkgPT4ge1xuICAgIHJldHVybiBhcGlSZXF1ZXN0KCcvY3JlYXRlX3NjZW5lJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzY2VuZURhdGEpXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbGVhZHNBUEksXG4gIHRhc2tzQVBJXG59OyAiXSwibmFtZXMiOlsiaGFuZGxlVG9rZW5FeHBpcmVkIiwiQVBJX0JBU0VfVVJMIiwidG9rZW5DYWNoZSIsInRva2VuIiwiaXNWYWxpZCIsImxhc3RDaGVjayIsImNhY2hlRHVyYXRpb24iLCJnZXRBdXRoVG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY2hlY2tUb2tlblZhbGlkaXR5Iiwibm93IiwiRGF0ZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwib2siLCJyZXN1bHQiLCJqc29uIiwic3RhdHVzIiwiZXJyb3IiLCJjb25zb2xlIiwiaXNUb2tlblZhbGlkIiwiY2xlYXJUb2tlbkNhY2hlIiwiYXBpUmVxdWVzdCIsImVuZHBvaW50Iiwib3B0aW9ucyIsImxvZyIsIkVycm9yIiwidG9rZW5DaGVja1Byb21pc2UiLCJkZWZhdWx0SGVhZGVycyIsImNvbmZpZyIsInRoZW4iLCJjYXRjaCIsIlR5cGVFcnJvciIsImxlYWRzQVBJIiwiZ2V0U3RhdGlzdGljcyIsImZpbHRlckJ5IiwiZ2V0RmlsdGVyZWRTdGF0aXN0aWNzIiwiZmlsdGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0RmlsdGVyZWRDb3VudCIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImxlYWRzX3Byb2R1Y3QiLCJsZWFkc190eXBlIiwiZmlyc3RfZm9sbG93X3N0YXJ0IiwiZmlyc3RfZm9sbG93X2VuZCIsImxhdGVzdF9mb2xsb3dfc3RhcnQiLCJsYXRlc3RfZm9sbG93X2VuZCIsIm5leHRfZm9sbG93X3N0YXJ0IiwibmV4dF9mb2xsb3dfZW5kIiwiZmlyc3RfYXJyaXZlX3N0YXJ0IiwiZmlyc3RfYXJyaXZlX2VuZCIsImlzX2Fycml2ZSIsInVuZGVmaW5lZCIsInRvU3RyaW5nIiwidGFza3NBUEkiLCJnZXRDYWxsVGFza3NMaXN0IiwiZ2V0U2NyaXB0VGFza3NMaXN0IiwiZ2V0Q2FsbFRhc2tzU3RhdGlzdGljcyIsImdldENhbGxUYXNrRGV0YWlscyIsInRhc2tJZCIsImdldFRhc2tGb2xsb3d1cFJlY29yZHMiLCJjcmVhdGVDYWxsVGFzayIsInRhc2tEYXRhIiwiY3JlYXRlVGFzayIsImNyZWF0ZU91dGJvdW5kQ2FsbCIsIm91dGJvdW5kRGF0YSIsInF1ZXJ5T3V0Ym91bmRDYWxsIiwiam9iSWRzIiwiam9iX2lkcyIsImNoZWNrVGFza1N0YXR1cyIsImdldFRhc2tTdGF0dXNEZXRhaWxzIiwicXVlcnlUYXNrRXhlY3V0aW9uIiwidGFza19pZCIsImdldFRhc2tTdGF0aXN0aWNzIiwiZ2V0Q29tcGxldGVkVGFza3NMaXN0IiwiYmF0Y2hDaGVja1Rhc2tTdGF0dXMiLCJ0YXNrSWRzIiwidXBkYXRlVGFza1NjcmlwdElkIiwic2NyaXB0SWQiLCJzY3JpcHRfaWQiLCJzdGFydENhbGxUYXNrIiwic3VzcGVuZFJlc3VtZVRhc2siLCJhY3Rpb24iLCJzY2VuZXNBUEkiLCJnZXRTY2VuZXMiLCJnZXRTY2VuZURldGFpbHMiLCJzY2VuZUlkIiwiY3JlYXRlU2NlbmUiLCJzY2VuZURhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});